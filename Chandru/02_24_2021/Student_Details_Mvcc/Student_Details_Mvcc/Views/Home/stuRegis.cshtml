@model Student_Details_Mvcc.Models.Studentmodel

@{
    ViewBag.Title = "stuRegis";
}



<div class="row justify-content-md-start">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                Wellcome
            </div>
            <div class="card-body">
                @if (Session["FullName"] != null)
                {
                    <p>Name: @Session["FullName"].ToString()</p>
                    <p>Email: @Session["Email"].ToString()</p>
                    <a href="@Url.Action("Logout","Home")" class="btn btn-warning">Logout</a>
                }
            </div>
        </div>

    </div>
</div>


<hr />
<h2>Student Registration</h2>


@using (Html.BeginForm("stuRegis", "Home", new { returnUrl = Request.QueryString["ReturnUrl"] }, FormMethod.Post, new { id = "addUser" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    <hr />


    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">

        @Html.LabelFor(model => model.Std_Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Std_Name, new { @class = "form-control User", @placeholder = "StudentName" })

            @Html.ValidationMessageFor(model => model.Std_Name, "", new { @class = "badge badge-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            Male:   @Html.RadioButton("Gender", "Male")
            Female: @Html.RadioButton("Gender", "Female")
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.std_Class, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.std_Class, new SelectList(new[] { "I", "II", "III", "IV" }), "--Select--", new { @class = "form-control Section", @placeholder = "studentclass" })

            @Html.ValidationMessageFor(model => model.std_Class, "", new { @class = "text-danger" })
        </div>
    </div>





    <div class="form-group">
        @Html.LabelFor(model => model.std_Section, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.std_Section, new SelectList(new[] { "A", "B", "C", "D" }), "--Select--", new { @class = "form-control Section", @placeholder = "studentclass" })

            @Html.ValidationMessageFor(model => model.std_Section, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.CheckBox("isActive", true)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-info" />

            @if (ViewBag.msg != null)
            {
                <script type="text/javascript">
                        alert("Student Add Successfully!");
                         window.location.href ="@Url.Action("CreateDetails")";

                </script>
            }

        </div>
    </div>
</div>
}




<script type="text/javascript">
    $(document).ready(function () {
        $('#addUser').bootstrapValidator({
            fields: {
                Name: {
                    selector: '.User',
                    message: 'name not valid',
                    validators: {
                        notEmpty: {
                            message: 'Name can not empty'
                        },

                    }
                },


                std_Class: {
                    selector: '.std_Class',
                    message: 'name not valid',
                    validators: {
                        notEmpty: {
                            message: 'Class can not empty'
                        },

                    }
                },

                std_Section: {
                    selector: '.Section',
                    message: ' not valid',
                    validators: {
                        notEmpty: {
                            message: 'Student Section can not empty'
                        },

                    }
                }
            }
        })
    })
</script>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


