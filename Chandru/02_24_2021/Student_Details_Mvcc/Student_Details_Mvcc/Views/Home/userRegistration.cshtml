@model Student_Details_Mvcc.Models.UserRegistration

<style>
    .badge-danger {
        color: white;
        background-color: red;
    }
</style>

<div class="row justify-content-md-start">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                Wellcome
            </div>
            <div class="card-body">
                @if (Session["FullName"] != null)
                {
                    <p>Name: @Session["FullName"].ToString()</p>
                    <p>Email: @Session["Email"].ToString()</p>
                    <a href="@Url.Action("Logout","Home")" class="btn btn-warning">Logout</a>
                }
            </div>
        </div>

    </div>
</div>






@using (Html.BeginForm("UserRegistration", "Home", new { returnUrl = Request.QueryString["ReturnUrl"] }, FormMethod.Post, new { id = "addUser" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />  <h4>UserRegistration</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2 user" })

            <div div class="col-md-4">

                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control-sm User" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "badge badge-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control-sm " } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "badge badge-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control-sm last" } })
                @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "badge badge-danger" })
            </div>
        </div>

        
        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Gender, new SelectList(new[] { "Male", "Female" }), "--Select--", new { @class = "form-control-sm last" })


                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "badge badge-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control-sm last" } })
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "badge badge-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MobNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MobNo, new { htmlAttributes = new { @class = "form-control-sm last" } })
                @Html.ValidationMessageFor(model => model.MobNo, "", new { @class = "badge badge-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control-sm" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "badge badge-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control-sm " } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "badge badge-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownListFor(model => model.Country, new SelectList(new[] { "India", "Australia", "USA", "UK" }), "--Select--", new { @class = "form-control-sm  " })

                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "badge badge-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.State, new SelectList(new[] { "Tamilnadu", "Kerla", "Delhi", "Bangalore" }), "--Select--", new { @class = "form-control-sm  " })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "badge badge-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.City, new SelectList(new[] { "Namakal", "Cbe", "Cheenai", "Karur" }), "--Select--", new { @class = "form-control-sm  " })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "badge badge-danger" })

            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />

                @if (ViewBag.msg != null)
                {
                    <script type="text/javascript">
                                    alert("Register Successfully!");
                                    window.location.href ="@Url.Action("Login")";
                    </script>
                }
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@*<script type="text/javascript">
    $(document).ready(function () {
        $('#addUser').bootstrapValidator({
            fields: {
                FirstName: {
                    selector: '.User',
                    message: 'name not valid',
                    validators: {
                        notEmpty: {
                            message: 'Name can not empty'
                        },

                    }
                },
                LastName: {
                    selector: '.last',
                    message: 'name not valid',
                    validators: {
                        notEmpty: {
                            message: 'Name can not empty'


                        },

                    }
                },
                Email: {
                    selector: '.email',
                    message: 'name not valid',
                    validators: {
                        notEmpty: {
                            message: 'Name can not empty'
                        },
                        stringLength: {

                        }

                    }
                },
                Password: {
                    selector: '.psw',
                    message: 'name not valid',
                    validators: {
                        notEmpty: {
                            message: 'Name can not empty'
                        },
                        stringLength: {
                            min: 4,
                            max: 6,
                            message: 'Password will be 4 to 6 digite'
                        }

                    }
                },
                ConfirmPassword: {
                    selector: '.cpsw',
                    message: 'Password not valid',
                    validators: {
                        notEmpty: {
                            message: 'Password can not empty'
                        },
                        stringLength: {
                            min: 4,
                            max: 6,
                            message: 'Password will be 4 to 6 digite'
                        }
                    }
                }
            }
        })
    })
</script>*@



<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>


